Blatt 01: Reguläre Sprachen

    A1.1: Sprachen von regulären Ausdrücken
    Welche Sprache wird von dem folgenden regulären Ausdruck beschrieben?

    a + a(a + b)^∗ a

        Lösung:
        a oder a gefolgt von 0 bis unedlich a und b und zum schluss ein a
        Beispiele:
        a
        aa
        aaa
        aba
        ababa
        wichtig!
        Vorne und Hinten müssen immer a stehen

A1.2: Bezeichner in Programmiersprachen

    regulärer Ausdruck:
    Variable: (V + v) (a-z + A-Z + 0-9 + _)^* (a-z + A-Z + 0-9)
    Parameter: (P + p) (a-z + A-Z + 0-9 + _)^* (a-z + A-Z + 0-9)
    Bezeichner: (a-z + A-Z) (a-z + A-Z + 0-9 + _)^* (a-z + A-Z + 0-9)
    Zusammen: ((V + v) + (P + p) + (a-z + A-Z)) (a-z + A-Z + 0-9 + _)^* (a-z + A-Z + 0-9)

    DFA:

    Regex: ((Vv)+(Pp)+(a-zA-z))(a-zA-Z0-9_)^*(a-zA-Z0-9) 
    Alphabet: {V,v,P,p,a-z,A-Z,0-9,_}
    Zustände: 
    Übergänge: 
    Startzustand: q0 / (Vv), (Pp), (a-zA-z)
    Endzustand: q3 / (a-zA-z0-9)

    q0: (Vv), q1
    q0: (Pp), q1
    q0: (a-zA-z), q1
    q1: (a-zA-Z0-9_), q2
    q1: (a-zA-Z0-9), q3
    q2: (a-zA-Z0-9), q3
    q3: (a-zA-Z0-9_), q2
    q3: (a-zA-Z0-9), q3

    reguläre Grammatik:

    Sprache: 
    Nichtterminale: {S,A,B,C,D,E}
    Terminale: {V,v,P,p,a-z,A-Z,0-9,_}
    Startsymbol: S
    Produktionen:
    S → (Vv)A | (Pp)A | (a-zA-z)A
    A → (a-zA-Z0-9_)A | (a-zA-Z0-9)

A1.3: Gleitkommazahlen in Programmiersprachen
    Regex: 
    [+-](0-9)^+(a-zA-Z.)^0 bis 1 (0-9)^*(a-zA-Z)^0 bis 1

    DFA: 
    Alphabet: {0-9,+,-,a-z,A-Z,.}
    Zustände: 
    Übergänge: 
    Startzustand: q0
    Endzustand: q5

    q0: +, q1 / -, q1
    q1: 0-9, q1 / 0-9, q2
    q2: 
    q3: 
!!!!!
    reguläre Grammatik: 
!!!!!

A1.4: Mailadressen?
    (a−z)^+@(a−z).(a−z)

    - groß und Kleinschreibung
    - Zahlen ?
    - nur ein Buchstabe verwendbar
    - endung vorgegeben

    (a−zA-Z)^+@(a−zA-Z)^+.(com + de + e.t.c)

A1.5: Der zweitletzte Buchstabe
    Entwickeln Sie einen DFA, der nur Wörter über Σ={1,2,3}
    akzeptiert, deren zweitletztes Zeichen dasselbe ist wie das zweite.

    Alphabet: {1,2,3}
    Zustände: 
    Übergänge: 
    Startzustand: q0
    Endzustand: q5

    q0: 1, q1 / 2, q1 / 3, q1
    q1: 1, q2 / 2, q3 / 3, q4
    q2: 1, q5 / 2, q2 / 3, q2
    q3: 1, q3 / 2, q5 / 3, q3
    q4: 1, q4 / 2, q4 / 3, q5
    q5: 1, q5 / 2, q5 / 3, q5

A1.6: Sprache einer regulären Grammatik

Sprache: 
    fängt mir a an und endet mit a oder b
Regex: 
    a(bc)^*d(a+b)((c)^*(d(a+b))^*)
DFA: 
    Alphabet: {a,b,c,d}
    Zustände: 
    Übergänge: 
    Startzustand: q0
    Endzustand: q

    q0: a, q1
    q1: d, q2
    q1: b, q1
    q1: c, q1
    q2: a, q3
    q2: b, q3
    q2: c, q1
    q3: ende